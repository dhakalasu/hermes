/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace Marketplace {
  export type SaleStruct = {
    tokenId: BigNumberish;
    nftContract: AddressLike;
    seller: AddressLike;
    startingPrice: BigNumberish;
    buyNowPrice: BigNumberish;
    currentBid: BigNumberish;
    currentBidder: AddressLike;
    endTime: BigNumberish;
    active: boolean;
    completed: boolean;
  };

  export type SaleStructOutput = [
    tokenId: bigint,
    nftContract: string,
    seller: string,
    startingPrice: bigint,
    buyNowPrice: bigint,
    currentBid: bigint,
    currentBidder: string,
    endTime: bigint,
    active: boolean,
    completed: boolean
  ] & {
    tokenId: bigint;
    nftContract: string;
    seller: string;
    startingPrice: bigint;
    buyNowPrice: bigint;
    currentBid: bigint;
    currentBidder: string;
    endTime: bigint;
    active: boolean;
    completed: boolean;
  };
}

export interface MarketplaceInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "buyNow"
      | "cancelSale"
      | "finalizeSale"
      | "getSale"
      | "getTotalSales"
      | "listNFT"
      | "owner"
      | "pendingWithdrawals"
      | "placeBid"
      | "platformFee"
      | "renounceOwnership"
      | "sales"
      | "setPlatformFee"
      | "transferOwnership"
      | "withdraw"
      | "withdrawPlatformFees"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "BidPlaced"
      | "OwnershipTransferred"
      | "SaleCancelled"
      | "SaleCompleted"
      | "SaleListed"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "buyNow",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelSale",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "finalizeSale",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getSale",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalSales",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "listNFT",
    values: [
      AddressLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pendingWithdrawals",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "placeBid",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "platformFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "sales", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "setPlatformFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawPlatformFees",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "buyNow", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "cancelSale", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "finalizeSale",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getSale", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getTotalSales",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "listNFT", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pendingWithdrawals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "placeBid", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "platformFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "sales", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setPlatformFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawPlatformFees",
    data: BytesLike
  ): Result;
}

export namespace BidPlacedEvent {
  export type InputTuple = [
    saleId: BigNumberish,
    bidder: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [saleId: bigint, bidder: string, amount: bigint];
  export interface OutputObject {
    saleId: bigint;
    bidder: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SaleCancelledEvent {
  export type InputTuple = [saleId: BigNumberish];
  export type OutputTuple = [saleId: bigint];
  export interface OutputObject {
    saleId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SaleCompletedEvent {
  export type InputTuple = [
    saleId: BigNumberish,
    buyer: AddressLike,
    finalPrice: BigNumberish
  ];
  export type OutputTuple = [saleId: bigint, buyer: string, finalPrice: bigint];
  export interface OutputObject {
    saleId: bigint;
    buyer: string;
    finalPrice: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SaleListedEvent {
  export type InputTuple = [
    saleId: BigNumberish,
    tokenId: BigNumberish,
    nftContract: AddressLike,
    seller: AddressLike,
    startingPrice: BigNumberish,
    buyNowPrice: BigNumberish,
    endTime: BigNumberish
  ];
  export type OutputTuple = [
    saleId: bigint,
    tokenId: bigint,
    nftContract: string,
    seller: string,
    startingPrice: bigint,
    buyNowPrice: bigint,
    endTime: bigint
  ];
  export interface OutputObject {
    saleId: bigint;
    tokenId: bigint;
    nftContract: string;
    seller: string;
    startingPrice: bigint;
    buyNowPrice: bigint;
    endTime: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Marketplace extends BaseContract {
  connect(runner?: ContractRunner | null): Marketplace;
  waitForDeployment(): Promise<this>;

  interface: MarketplaceInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  buyNow: TypedContractMethod<[saleId: BigNumberish], [void], "payable">;

  cancelSale: TypedContractMethod<[saleId: BigNumberish], [void], "nonpayable">;

  finalizeSale: TypedContractMethod<
    [saleId: BigNumberish],
    [void],
    "nonpayable"
  >;

  getSale: TypedContractMethod<
    [saleId: BigNumberish],
    [Marketplace.SaleStructOutput],
    "view"
  >;

  getTotalSales: TypedContractMethod<[], [bigint], "view">;

  listNFT: TypedContractMethod<
    [
      nftContract: AddressLike,
      tokenId: BigNumberish,
      startingPrice: BigNumberish,
      buyNowPrice: BigNumberish,
      duration: BigNumberish
    ],
    [bigint],
    "nonpayable"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  pendingWithdrawals: TypedContractMethod<
    [arg0: BigNumberish, arg1: AddressLike],
    [bigint],
    "view"
  >;

  placeBid: TypedContractMethod<[saleId: BigNumberish], [void], "payable">;

  platformFee: TypedContractMethod<[], [bigint], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  sales: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        bigint,
        string,
        string,
        bigint,
        bigint,
        bigint,
        string,
        bigint,
        boolean,
        boolean
      ] & {
        tokenId: bigint;
        nftContract: string;
        seller: string;
        startingPrice: bigint;
        buyNowPrice: bigint;
        currentBid: bigint;
        currentBidder: string;
        endTime: bigint;
        active: boolean;
        completed: boolean;
      }
    ],
    "view"
  >;

  setPlatformFee: TypedContractMethod<
    [newFee: BigNumberish],
    [void],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  withdraw: TypedContractMethod<[saleId: BigNumberish], [void], "nonpayable">;

  withdrawPlatformFees: TypedContractMethod<[], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "buyNow"
  ): TypedContractMethod<[saleId: BigNumberish], [void], "payable">;
  getFunction(
    nameOrSignature: "cancelSale"
  ): TypedContractMethod<[saleId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "finalizeSale"
  ): TypedContractMethod<[saleId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getSale"
  ): TypedContractMethod<
    [saleId: BigNumberish],
    [Marketplace.SaleStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getTotalSales"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "listNFT"
  ): TypedContractMethod<
    [
      nftContract: AddressLike,
      tokenId: BigNumberish,
      startingPrice: BigNumberish,
      buyNowPrice: BigNumberish,
      duration: BigNumberish
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "pendingWithdrawals"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "placeBid"
  ): TypedContractMethod<[saleId: BigNumberish], [void], "payable">;
  getFunction(
    nameOrSignature: "platformFee"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "sales"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        bigint,
        string,
        string,
        bigint,
        bigint,
        bigint,
        string,
        bigint,
        boolean,
        boolean
      ] & {
        tokenId: bigint;
        nftContract: string;
        seller: string;
        startingPrice: bigint;
        buyNowPrice: bigint;
        currentBid: bigint;
        currentBidder: string;
        endTime: bigint;
        active: boolean;
        completed: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "setPlatformFee"
  ): TypedContractMethod<[newFee: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "withdraw"
  ): TypedContractMethod<[saleId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "withdrawPlatformFees"
  ): TypedContractMethod<[], [void], "nonpayable">;

  getEvent(
    key: "BidPlaced"
  ): TypedContractEvent<
    BidPlacedEvent.InputTuple,
    BidPlacedEvent.OutputTuple,
    BidPlacedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "SaleCancelled"
  ): TypedContractEvent<
    SaleCancelledEvent.InputTuple,
    SaleCancelledEvent.OutputTuple,
    SaleCancelledEvent.OutputObject
  >;
  getEvent(
    key: "SaleCompleted"
  ): TypedContractEvent<
    SaleCompletedEvent.InputTuple,
    SaleCompletedEvent.OutputTuple,
    SaleCompletedEvent.OutputObject
  >;
  getEvent(
    key: "SaleListed"
  ): TypedContractEvent<
    SaleListedEvent.InputTuple,
    SaleListedEvent.OutputTuple,
    SaleListedEvent.OutputObject
  >;

  filters: {
    "BidPlaced(uint256,address,uint256)": TypedContractEvent<
      BidPlacedEvent.InputTuple,
      BidPlacedEvent.OutputTuple,
      BidPlacedEvent.OutputObject
    >;
    BidPlaced: TypedContractEvent<
      BidPlacedEvent.InputTuple,
      BidPlacedEvent.OutputTuple,
      BidPlacedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "SaleCancelled(uint256)": TypedContractEvent<
      SaleCancelledEvent.InputTuple,
      SaleCancelledEvent.OutputTuple,
      SaleCancelledEvent.OutputObject
    >;
    SaleCancelled: TypedContractEvent<
      SaleCancelledEvent.InputTuple,
      SaleCancelledEvent.OutputTuple,
      SaleCancelledEvent.OutputObject
    >;

    "SaleCompleted(uint256,address,uint256)": TypedContractEvent<
      SaleCompletedEvent.InputTuple,
      SaleCompletedEvent.OutputTuple,
      SaleCompletedEvent.OutputObject
    >;
    SaleCompleted: TypedContractEvent<
      SaleCompletedEvent.InputTuple,
      SaleCompletedEvent.OutputTuple,
      SaleCompletedEvent.OutputObject
    >;

    "SaleListed(uint256,uint256,address,address,uint256,uint256,uint256)": TypedContractEvent<
      SaleListedEvent.InputTuple,
      SaleListedEvent.OutputTuple,
      SaleListedEvent.OutputObject
    >;
    SaleListed: TypedContractEvent<
      SaleListedEvent.InputTuple,
      SaleListedEvent.OutputTuple,
      SaleListedEvent.OutputObject
    >;
  };
}
